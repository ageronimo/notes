(1)

TABLE OF CONTENTS:
1-Genral interface info
2-Git Shell commands
3-Basic knowledge (not coding)
4-Git commands
5-HTML

CLI - command line interface
^means of interacting with a computer in the form of successive line of text

GUI - graphic user interface
^means of interacting with a computer using visual icons

programming language: language designed to give instructions to a machine

Websites:
-pleasure and action between user and product
-organization, etc
-better to open from local server than folder, less buggy

Design:
UI: user interface | color, visually pleasing/aesthetic
UX: user experience | organization, layout, etc

add update delete (status symbols in git respectively)
+ ~ - 

CSS - Cascade Style Sheets
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
(2)

CLI Commands (Git Shell aka Power Shell):
cd | change directory
cd / | root
cd .. | move up
mkdir <folder> | create folder
touch <filename> | creates file
ls | list files/folders in current folder
mkdir <file>/<file2> | creates file from current location
function()

/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
(3)

*do not copy and paste

3 Levels of Knowing:
-understanding
-teaching
-grocking and intuition

Tools:
- Github
- Git Shell
- Sublime Text

Traits of a developer:
-team player
-problem solver
-good communicator

/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
(4)

Git Commands:
git init | initialize project
git status | checks status of project
"clean" | no red in status
git add <filename> |
git commit -m 'this is my first commit for notes' | commits, adds to queue
git push | takes everything from queue and uploads (remote)
//upload process: add>commit>push

Uploading Process Sequence
text.txt vvv (working dir)
staging vvv (git add)
local git vvv (git commit)
Github (git push)

/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
(5)

HTML : mark up language

<tags> | everything inside is structure, desc of code
index.html | referred to as toc for site

parts:
-head
-body
-header
-footer

<!DOCTYPE html> | always wanted on every page | doctype defines doc type
</html> | tells browser you're writing in html
 <meta charset="utf-8"> |sets secondary standards for character sets
<html lang="en"> | defines root of html doc
  <head></head> | defines info about doc
  <body></body> | defines doc body

<p> | paragraph element
</p> | closing tag
<br/> | self closing tag

-tags inside body are seen on website
-head,body,html always have closing tags

<header></header> | navigation, logos
<footer></footer> | copyright, etc
<div></div> | block element, stacks instead of side to side
<span></span> | inline elements

-words can be wrapped in tags

Attributes:
<img src="http://something.com/myimage.jpg"/>

<h1></h1> >> <h6></h6> | biggest to smallest text size
<b></b> | bold
<!--comment--> | (self explanatory)
<div id=""> | only use once, can be used for linking elements
<div class="" | can be used multiple times, use space to use more than one class, uses .
<a href=""></a> | hyperlink reference, uses #

Websites (poor structure):
http://www.exmouth-view.co.uk/
www.themostamazingwebsiteontheinternet.com

Notes:
-same text size, color, etc is bad
-organization
-order matters to some extent (header, footer, content, etc)
-IDs are unique, only use once
-html more structure
-^css more visual

2 types of lists:
<ul> </ul> | unordered lists : bullet points, arrows, etc
  <li> </li> | list child
<ol> </ol> | ordered lists
-lists can be put in lists
-place divs
-may include #s and roman numerals
<nav> </nav>

Div:
<div aside>
<h3> title

Blog Entries:
*make sure to close tags

<div>
  <class="content">
  <h2>title
  <h6>date
  <div class="article">
    <h3>
    <p>
   <div class="article">
    <h3>
    <p>
</div>
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
(6) CSS

CSS | Cascading style sheets

3 ways to add: 
 1.) In line styles (style="" att)
 2.) Internal using <style></style> element (within head)
 3.) External stylesheet linked within <head></head>

CSS declarations
 property:value;
 close with {}

-to group selectors w/ same style, use comma
  ex: h1, h2, p { color: red; }
  
Colors
rgba | color transparency/opacity
3 ways to add color values:
  - valid color name
      ex: h1 { color: red; }
  - rgb value, aka rgba (a for transparency/opacity)
      ex: #container {background-color: rgb(255,255,0;)}
  - hex value
      ex: .main_title { border 1pc #ff0000 solid; }